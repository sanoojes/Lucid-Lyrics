name: Build and Deploy to Releases Branch

on:
  push:
    tags:
      - 'v*.*.*'
      
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x 

      - name: Build project
        run: deno task build

      - name: Get version from Git tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Deploy artifacts to releases branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          git clone --branch=releases --single-branch https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git deploy_dir
          
          cd deploy_dir
          rm -rf latest/* # Clear previous 'latest' build
          mkdir -p ${{ env.VERSION }}
          mkdir -p latest
          cp -r ../dist/. ./${{ env.VERSION }}
          cp -r ../dist/. ./latest

          echo "# Project Releases" > README.md
          echo "" >> README.md
          echo "This branch holds the final, compiled extension files for each version, ready for use." >> README.md          echo "" >> README.md
          echo "## Latest Version" >> README.md
          echo "- **[latest](./latest)**" >> README.md
          echo "" >> README.md
          echo "## All Versions" >> README.md
          ls -d v* | sort -V -r | sed 's/^\(.*\)$/- [\1](.\/\1)/' >> README.md

          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit. Skipping."
          else
            git commit -m "Deploy: Add artifacts for version ${{ env.VERSION }}"
            git push
          fi