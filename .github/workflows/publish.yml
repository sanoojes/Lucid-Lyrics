name: Jekyll + Builder

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2.0.3

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.lock') }}
          restore-keys: ${{ runner.os }}-deno-

      - name: Run Biome check (optional)
        run: deno task check || echo "Biome check failed â€“ continuing"

      - name: Build project
        run: deno task build

      - name: Generate version tag
        id: vars
        run: |
          VERSION="v$(deno eval 'console.log(JSON.parse(Deno.readTextFileSync("deno.jsonc").replace(/\/\/.*|\/\*[\s\S]*?\*\//g, ""))["version"])')"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare releases folder
        run: |
          mkdir -p ./build/releases/${{ steps.vars.outputs.version }}
          cp -r dist/* ./build/releases/${{ steps.vars.outputs.version }}/
          rm -rf ./build/releases/latest
          mkdir -p ./build/releases/latest
          cp -r dist/* ./build/releases/latest/

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Prepare releases branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git ls-remote --heads origin releases | grep -q refs/heads/releases; then
            git fetch origin releases
            git checkout releases
          else
            git checkout --orphan releases
            git rm -rf . || true
            git commit --allow-empty -m "Initial releases commit"
            git push origin releases
          fi

          git clean -fdx -e .git

          VERSION=${{ needs.build.outputs.version }}

          # Create versioned folders
          mkdir -p versions/$VERSION versions/latest
          cp -r dist/* versions/$VERSION/
          cp -r dist/* versions/latest/

          git add versions/
          git commit -m "Release $VERSION" || echo "No changes to commit"
          git push origin releases --force

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout releases branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git ls-remote --heads origin releases | grep -q refs/heads/releases; then
            git fetch origin releases
            git checkout releases
          else
            git checkout --orphan releases
            git rm -rf . || true
            git commit --allow-empty -m "Initial releases commit"
            git push origin releases
          fi

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v5

      - name: Create _config.yml for Jekyll
        run: |
          echo "include:" > _config.yml
          echo "  - versions" >> _config.yml
          echo "markdown: kramdown" >> _config.yml

      - name: Build Jekyll site
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
